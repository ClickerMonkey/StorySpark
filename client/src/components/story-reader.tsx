import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { type Story } from "@shared/schema";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { ImageModal } from "@/components/image-modal";
import { ChevronLeft, ChevronRight, Volume2, Bookmark, Share, Download, Edit, Save, BookOpen, Users, Clock, RefreshCw, Loader2 } from "lucide-react";

interface StoryReaderProps {
  story: Story;
  onEdit?: () => void;
  onSave?: () => void;
}

export function StoryReader({ story, onEdit, onSave }: StoryReaderProps) {
  const [currentPageIndex, setCurrentPageIndex] = useState(0);
  const [customPrompt, setCustomPrompt] = useState("");
  const [isRegenerateDialogOpen, setIsRegenerateDialogOpen] = useState(false);
  const [zoomedImage, setZoomedImage] = useState<{ url: string; alt: string } | null>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const bookmarkMutation = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("POST", `/api/stories/${story.id}/bookmark`);
      return response.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['/api/stories', story.id] });
      queryClient.invalidateQueries({ queryKey: ['/api/stories'] });
      toast({
        title: story.isBookmarked ? "Bookmark Removed" : "Story Bookmarked!",
        description: story.isBookmarked ? "Story removed from bookmarks" : "Story added to your bookmarks",
      });
    },
    onError: (error) => {
      toast({
        title: "Bookmark Failed",
        description: error instanceof Error ? error.message : "Failed to update bookmark",
        variant: "destructive",
      });
    },
  });

  const handleBookmark = () => {
    bookmarkMutation.mutate();
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: story.title,
        text: `Check out this amazing children's story: ${story.title}`,
        url: window.location.href,
      });
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast({
        title: "Link Copied!",
        description: "Story link has been copied to your clipboard",
      });
    }
  };

  const handleDownload = () => {
    // Create a simple text version of the story for download
    const storyText = [
      `${story.title}\n`,
      `Age Group: ${story.ageGroup}`,
      `Setting: ${story.setting}\n`,
      ...story.pages.map((page, index) => `Page ${index + 1}: ${page.text}`),
      `\nGenerated by StoryMaker AI`
    ].join('\n');

    const blob = new Blob([storyText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${story.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Download Started!",
      description: "Your story has been downloaded as a text file",
    });
  };
  
  const currentPage = story.pages[currentPageIndex];
  const isFirstPage = currentPageIndex === 0;
  const isLastPage = currentPageIndex === story.pages.length - 1;

  const nextPage = () => {
    if (!isLastPage) {
      setCurrentPageIndex(currentPageIndex + 1);
    }
  };

  const previousPage = () => {
    if (!isFirstPage) {
      setCurrentPageIndex(currentPageIndex - 1);
    }
  };

  const regenerateImageMutation = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("POST", `/api/stories/${story.id}/pages/${currentPage.pageNumber}/regenerate-image`, {
        customPrompt,
      });
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/stories/${story.id}`] });
      toast({
        title: "Image Regenerated!",
        description: "The page illustration has been updated with your custom prompt.",
      });
      setIsRegenerateDialogOpen(false);
      setCustomPrompt("");
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to regenerate image",
        variant: "destructive",
      });
    },
  });

  return (
    <Card className="bg-white shadow-lg overflow-hidden">
      {/* Story Header */}
      <div className="bg-gradient-to-r from-indigo-600 to-pink-600 text-white p-8 text-center">
        <h2 className="text-4xl font-bold mb-2" data-testid="story-title">{story.title}</h2>
        <p className="text-xl opacity-90">A magical adventure story</p>
        <div className="flex justify-center space-x-6 mt-4 text-sm">
          <span><BookOpen className="inline mr-1" size={16} />{story.totalPages} Pages</span>
          <span><Users className="inline mr-1" size={16} />Ages {story.ageGroup}</span>
          <span><Clock className="inline mr-1" size={16} />5 min read</span>
        </div>
      </div>

      {/* Story Navigation */}
      <div className="bg-gray-50 px-8 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Button
              variant="outline"
              onClick={previousPage}
              disabled={isFirstPage}
              data-testid="button-previous"
            >
              <ChevronLeft className="mr-2 h-4 w-4" />
              Previous
            </Button>
            <span className="text-gray-600 font-medium">
              Page <span data-testid="current-page-number">{currentPageIndex + 1}</span> of <span data-testid="total-pages">{story.totalPages}</span>
            </span>
            <Button
              onClick={nextPage}
              disabled={isLastPage}
              className="bg-indigo-600 hover:bg-indigo-700"
              data-testid="button-next"
            >
              Next
              <ChevronRight className="ml-2 h-4 w-4" />
            </Button>
          </div>

          <div className="flex items-center space-x-2">
            <Button variant="ghost" size="sm" data-testid="button-read-aloud">
              <Volume2 className="h-4 w-4" />
            </Button>
            {currentPage?.imageUrl && (
              <Dialog open={isRegenerateDialogOpen} onOpenChange={setIsRegenerateDialogOpen}>
                <DialogTrigger asChild>
                  <Button variant="ghost" size="sm" data-testid="button-regenerate-image">
                    <RefreshCw className="h-4 w-4" />
                  </Button>
                </DialogTrigger>
                <DialogContent className="sm:max-w-[525px]">
                  <DialogHeader>
                    <DialogTitle>Regenerate Page Image</DialogTitle>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-900 mb-2">
                        Custom Image Prompt
                      </label>
                      <Textarea
                        value={customPrompt}
                        onChange={(e) => setCustomPrompt(e.target.value)}
                        placeholder="Describe how you want this page to look. For example: 'Make the characters look happier', 'Add more colorful flowers in the background', 'Show the characters in a different pose'..."
                        className="min-h-[120px]"
                        data-testid="textarea-custom-prompt"
                      />
                      <p className="text-sm text-gray-500 mt-2">
                        Current page: "{currentPage.text.slice(0, 100)}..."
                      </p>
                    </div>
                    <div className="flex justify-end space-x-2">
                      <Button
                        variant="outline"
                        onClick={() => {
                          setIsRegenerateDialogOpen(false);
                          setCustomPrompt("");
                        }}
                        data-testid="button-cancel-regenerate"
                      >
                        Cancel
                      </Button>
                      <Button
                        onClick={() => regenerateImageMutation.mutate()}
                        disabled={regenerateImageMutation.isPending || !customPrompt.trim()}
                        data-testid="button-confirm-regenerate"
                      >
                        {regenerateImageMutation.isPending ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Regenerating...
                          </>
                        ) : (
                          <>
                            <RefreshCw className="mr-2 h-4 w-4" />
                            Regenerate Image
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
            )}
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={handleBookmark}
              data-testid="button-bookmark"
            >
              <Bookmark 
                className={`h-4 w-4 ${story.isBookmarked ? 'fill-yellow-400 text-yellow-400' : ''}`} 
              />
            </Button>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={handleShare}
              data-testid="button-share"
            >
              <Share className="h-4 w-4" />
            </Button>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={handleDownload}
              data-testid="button-download"
            >
              <Download className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Story Page Content */}
      <CardContent className="p-8">
        <div className="max-w-4xl mx-auto">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
            {/* Story Image */}
            <div className="order-2 lg:order-1">
              {currentPage?.imageUrl ? (
                <div
                  className="cursor-pointer transform hover:scale-105 transition-transform"
                  onClick={() => setZoomedImage({ url: currentPage.imageUrl!, alt: `Story illustration for page ${currentPage.pageNumber}` })}
                  data-testid="page-image-container"
                >
                  <img 
                    src={currentPage.imageUrl}
                    alt={`Story illustration for page ${currentPage.pageNumber}`}
                    className="w-full rounded-xl shadow-lg"
                    data-testid="page-image"
                  />
                </div>
              ) : (
                <div className="w-full h-64 bg-gray-200 rounded-xl flex items-center justify-center">
                  <p className="text-gray-500">No image available</p>
                </div>
              )}
            </div>

            {/* Story Text */}
            <div className="order-1 lg:order-2">
              <div className="prose prose-lg max-w-none">
                <p 
                  className="text-xl leading-relaxed text-gray-800"
                  data-testid="page-text"
                >
                  {currentPage?.text}
                </p>
              </div>
            </div>
          </div>
        </div>
      </CardContent>

      {/* Image Modal */}
      {zoomedImage && (
        <ImageModal
          isOpen={true}
          onClose={() => setZoomedImage(null)}
          imageUrl={zoomedImage.url}
          alt={zoomedImage.alt}
        />
      )}

      {/* Story Footer */}
      <div className="bg-gray-50 px-8 py-6 border-t border-gray-200">
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-4">
            {onEdit && (
              <Button
                onClick={onEdit}
                className="bg-amber-500 hover:bg-amber-600 text-white font-medium"
                data-testid="button-edit-story"
              >
                <Edit className="mr-2 h-4 w-4" />
                Edit Story
              </Button>
            )}
            {onSave && (
              <Button
                onClick={onSave}
                className="bg-emerald-600 hover:bg-emerald-700 text-white font-medium"
                data-testid="button-save-story"
              >
                <Save className="mr-2 h-4 w-4" />
                Save to Library
              </Button>
            )}
          </div>

          <div className="text-sm text-gray-600">
            Created with StoryMaker AI
          </div>
        </div>
      </div>
    </Card>
  );
}
